<ResourceDictionary
	x:Class="BO2_Console_V4.Style" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" xmlns:Controls2="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Input.Toolkit" xmlns:bo2_console_v4="clr-namespace:BO2_Console_V4">
	<SolidColorBrush
		Color="#FFFF6D00"
		x:Key="DefaultColor" />
	<SolidColorBrush
		Color="#00141414"
		x:Key="DefaultBackground" />
	<SolidColorBrush
		Color="#FF141414"
		x:Key="DefaultBackgroundOpaque" />
	<SolidColorBrush
		Color="#FF5D5D5D"
		x:Key="DisabledColor" />
	<SolidColorBrush
		Color="#FF8D8D8D"
		x:Key="DefaultHover" />
	<FontWeight
		x:Key="DefaultFontWeight">Normal</FontWeight>
	<Style
		TargetType="{x:Type RepeatButton}"
		x:Key="SliderButtonStyle">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="IsTabStop"
			Value="False" />
		<Setter
			Property="Focusable"
			Value="False" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type RepeatButton}">
					<Border
						Background="#00FFFFFF" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type RepeatButton}"
		x:Key="SliderRepeatButton">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="IsTabStop"
			Value="False" />
		<Setter
			Property="Focusable"
			Value="False" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type RepeatButton}">
					<Border
						Background="#FF808080"
						Height="3"
						Margin="5 0 0 0" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type RepeatButton}"
		x:Key="SliderRepeatButton1">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type RepeatButton}">
					<Border
						SnapsToDevicePixels="True"
						Margin="5 0 0 0"
						Background="{TemplateBinding Foreground}"
						Height="3" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Style.Triggers>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="Foreground"
					Value="{DynamicResource DisabledColor}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type RepeatButton}"
		x:Key="RoundButtonStyle">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
	</Style>
	<Style
		TargetType="{x:Type Thumb}"
		x:Key="SliderThumbStyle">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="False" />
		<Setter
			Property="Height"
			Value="20" />
		<Setter
			Property="Width"
			Value="15" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Thumb}">
					<Canvas>
						<Ellipse
							Name="EllipseFill"
							Width="24"
							Height="24"
							VerticalAlignment="Stretch"
							HorizontalAlignment="Stretch"
							Fill="{TemplateBinding Background}"
							Canvas.Left="-2"
							Canvas.Top="-2" />
						<Ellipse
							Name="Ellipse"
							Width="20"
							Height="20"
							Canvas.Left="0"
							Canvas.Top="0"
							VerticalAlignment="Center"
							StrokeThickness="2"
							Stroke="{TemplateBinding Foreground}" />
					</Canvas>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="Ellipse"
								Property="Stroke"
								Value="#FFFFFFFF" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="Ellipse"
								Value="{DynamicResource DisabledColor}"
								Property="Stroke" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultBackground}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
	</Style>
	<Style
		TargetType="{x:Type Slider}"
		x:Key="{x:Type Slider}">
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Slider}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition
								Height="auto" />
							<RowDefinition
								Name="row"
								Height="auto" />
							<RowDefinition
								Height="auto" />
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition
								Width="auto" />
							<ColumnDefinition
								Name="column"
								Width="*" />
							<ColumnDefinition
								Width="auto" />
						</Grid.ColumnDefinitions>
						<RepeatButton
							Name="PART_DecreaseRepeatButton"
							Grid.Row="2"
							Grid.Column="0"
							Content="-"
							Style="{StaticResource RoundButtonStyle}" />
						<RepeatButton
							Name="PART_IncreaseRepeatButton"
							Grid.Row="2"
							Grid.Column="2"
							Content="+"
							Style="{StaticResource RoundButtonStyle}" />
						<Border
							Name="PART_Border"
							BorderThickness="1"
							Padding="2"
							CornerRadius="0"
							Grid.Row="1"
							Grid.Column="1"
							Width="{TemplateBinding Width}"
							Height="{TemplateBinding Height}"
							Background="{TemplateBinding Background}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Center"
							BorderBrush="{x:Null}" />
						<Track
							Name="PART_Track"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Center"
							Grid.Row="1"
							Grid.Column="1"
							Width="{TemplateBinding Width}"
							Height="{TemplateBinding Height}">
							<Track.DecreaseRepeatButton>
								<RepeatButton
									Command="Slider.DecreaseLarge"
									Interval="1"
									Delay="1"
									Style="{StaticResource SliderRepeatButton1}" />
							</Track.DecreaseRepeatButton>
							<Track.Thumb>
								<Thumb
									Style="{StaticResource SliderThumbStyle}" />
							</Track.Thumb>
							<Track.IncreaseRepeatButton>
								<RepeatButton
									Command="Slider.IncreaseLarge"
									Interval="1"
									Delay="1"
									Style="{StaticResource SliderRepeatButton}" />
							</Track.IncreaseRepeatButton>
						</Track>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="Slider.Orientation"
							Value="Vertical">
							<Setter
								TargetName="PART_Border"
								Property="HorizontalAlignment"
								Value="Center" />
							<Setter
								TargetName="PART_Border"
								Property="VerticalAlignment"
								Value="Stretch" />
							<Setter
								TargetName="PART_DecreaseRepeatButton"
								Property="Row"
								Value="2" />
							<Setter
								TargetName="PART_DecreaseRepeatButton"
								Property="Column"
								Value="1" />
							<Setter
								TargetName="PART_IncreaseRepeatButton"
								Property="Row"
								Value="2" />
							<Setter
								TargetName="PART_IncreaseRepeatButton"
								Property="Column"
								Value="1" />
							<Setter
								TargetName="PART_Track"
								Property="HorizontalAlignment"
								Value="Center" />
							<Setter
								TargetName="PART_Track"
								Property="VerticalAlignment"
								Value="Stretch" />
							<Setter
								TargetName="row"
								Property="Height"
								Value="*" />
							<Setter
								TargetName="column"
								Property="Width"
								Value="auto" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="MinHeight"
			Value="25" />
		<Setter
			Property="MaxHeight"
			Value="25" />
		<Setter
			Property="MinWidth"
			Value="50" />
		<Setter
			Property="RangeBase.Maximum"
			Value="100" />
	</Style>
	<Style
		TargetType="{x:Type Button}"
		x:Key="{x:Type Button}">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Button}">
					<Grid>
						<Rectangle
							Name="Rectangle"
							Fill="{TemplateBinding Background}" />
						<ContentPresenter
							TextBlock.Foreground="{DynamicResource DefaultBackgroundOpaque}"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Content="{TemplateBinding Content}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="Rectangle"
								Property="Stroke"
								Value="#FFFFFFFF" />
							<Setter
								Property="BorderThickness"
								Value="2" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="Rectangle"
								Value="{DynamicResource DisabledColor}"
								Property="Fill" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="Foreground"
			Value="#FF141414" />
		<Setter
			Property="FontWeight"
			Value="{DynamicResource DefaultFontWeight}" />
		<Setter
			Property="FontSize"
			Value="13" />
	</Style>
	<Style
		BasedOn="{StaticResource {x:Type Button}}"
		TargetType="{x:Type Button}"
		x:Key="ArrowButton">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Button}">
					<Grid>
						<Ellipse
							Name="circle"
							Fill="{DynamicResource DefaultBackground}"
							HorizontalAlignment="Center"
							Height="19"
							Stroke="{DynamicResource DefaultColor}"
							VerticalAlignment="Center"
							Width="19" />
						<Path
							Name="arrow"
							Data="M1,1.5 L4.5,5 L8,1.5"
							HorizontalAlignment="Center"
							SnapsToDevicePixels="False"
							Stroke="{DynamicResource DefaultColor}"
							StrokeThickness="2"
							VerticalAlignment="Center" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="#FFFFFFFF" />
							<Setter
								TargetName="arrow"
								Property="Fill"
								Value="#FFFFFFFF" />
							<Setter
								Property="BorderThickness"
								Value="2" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="circle"
								Value="{DynamicResource DisabledColor}"
								Property="Fill" />
							<Setter
								TargetName="arrow"
								Value="{DynamicResource DisabledColor}"
								Property="Fill" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="Foreground"
			Value="#FF141414" />
		<Setter
			Property="FontWeight"
			Value="{DynamicResource DefaultFontWeight}" />
		<Setter
			Property="FontSize"
			Value="13" />
	</Style>
	<Style
		TargetType="{x:Type Label}"
		x:Key="{x:Type Label}">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Label}">
					<Grid>
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledColor}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="FontWeight"
			Value="{DynamicResource DefaultFontWeight}" />
		<Setter
			Property="FontSize"
			Value="13" />
	</Style>
	<Style
		TargetType="{x:Type RadioButton}"
		x:Key="{x:Type RadioButton}">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type RadioButton}">
					<BulletDecorator
						Background="#00FFFFFF"
						Cursor="Hand">
						<BulletDecorator.Bullet>
							<Grid
								Height="16"
								Width="16">
								<Ellipse
									Name="RadioOuter"
									Fill="#00FFFFFF"
									Stroke="{DynamicResource DefaultColor}"
									StrokeThickness="2" />
								<Ellipse
									Name="RadioMark"
									Fill="{DynamicResource DefaultColor}"
									Width="8"
									Height="8"
									Visibility="Hidden" />
							</Grid>
						</BulletDecorator.Bullet>
						<TextBlock
							Name="TextBlock"
							Margin="05,-1,0,0"
							Foreground="{DynamicResource DefaultColor}"
							FontFamily="Segoe UI"
							FontSize="13"
							FontWeight="{DynamicResource DefaultFontWeight}">
							<InlineUIContainer>
								<ContentPresenter />
							</InlineUIContainer>
						</TextBlock>
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="true">
							<Setter
								TargetName="RadioMark"
								Property="Visibility"
								Value="Visible" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="RadioOuter"
								Value="{DynamicResource DisabledColor}"
								Property="Stroke" />
							<Setter
								TargetName="TextBlock"
								Value="{DynamicResource DisabledColor}"
								Property="Foreground" />
							<Setter
								TargetName="RadioMark"
								Value="{DynamicResource DisabledColor}"
								Property="Fill" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type Window}"
		x:Key="WindowStyle">
		<Setter
			Property="Window.ResizeMode"
			Value="NoResize" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Window}">
					<Grid>
						<Grid>
							<Rectangle
								Fill="{DynamicResource DefaultBackgroundOpaque}"
								Width="Auto"
								Height="Auto"
								Stroke="{DynamicResource DefaultColor}" />
							<!--Unknown connection ID: 1-->
							<StatusBar
								Height="30"
								Grid.ColumnSpan="1"
								Grid.Row="0"
								Margin="0"
								Background="{DynamicResource DefaultColor}"
								VerticalAlignment="Top" />
							<TextBlock
								Margin="10,5,0,0"
								IsHitTestVisible="False"
								Foreground="{DynamicResource DefaultBackgroundOpaque}"
								Text="{TemplateBinding Title}"
								FontFamily="Segoe UI"
								FontSize="14"
								FontWeight="Normal"
								VerticalAlignment="Top"
								Height="20" />
						</Grid>
						<ContentPresenter
							Grid.ColumnSpan="1"
							Grid.Row="0"
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							Margin="1,20,1,1" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type TextBox}"
		x:Key="{x:Type TextBox}">
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultBackground}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="TextBoxBase.SelectionBrush"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="FontWeight"
			Value="{DynamicResource DefaultFontWeight}" />
		<Setter
			Property="FontSize"
			Value="13" />
		<Setter
			Property="ColumnSpan"
			Value="2" />
		<Style.Triggers>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="BorderBrush"
					Value="{DynamicResource DisabledColor}" />
				<Setter
					Property="TextBoxBase.SelectionBrush"
					Value="{DynamicResource DisabledColor}" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource DisabledColor}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type CheckBox}"
		x:Key="{x:Type CheckBox}">
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultBackground}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type CheckBox}">
					<Grid
						Name="templateRoot"
						Background="#00FFFFFF"
						SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition
								Width="Auto" />
							<ColumnDefinition
								Width="*" />
						</Grid.ColumnDefinitions>
						<Border
							Name="checkBoxBorder"
							BorderBrush="{DynamicResource DefaultColor}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							Margin="1"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<Grid
								Name="markGrid">
								<Path
									Name="optionMark"
									Data="F1 M9.97498,1.22334 L4.6983,9.09834 L4.52164,9.09834 L0,5.19331 L1.27664,3.52165 L4.255,6.08833 L8.33331,1.52588E-05 L9.97498,1.22334"
									Fill="#FF212121"
									Margin="1"
									Opacity="0"
									Stretch="None" />
								<Rectangle
									Name="indeterminateMark"
									Fill="{DynamicResource DefaultColor}"
									Margin="2"
									Opacity="0" />
							</Grid>
						</Border>
						<ContentPresenter
							Name="contentPresenter"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							Content="{TemplateBinding Content}"
							Grid.Column="1"
							ContentStringFormat="{TemplateBinding ContentStringFormat}"
							Focusable="False"
							Margin="3, 0, 0, 0"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="True">
							<Setter
								TargetName="indeterminateMark"
								Property="UIElement.Opacity"
								Value="100" />
						</Trigger>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="{x:Null}" />
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledColor}"
								Property="BorderBrush" />
							<Setter
								Value="{DynamicResource DisabledColor}"
								Property="Foreground" />
							<Setter
								TargetName="checkBoxBorder"
								Value="{DynamicResource DisabledColor}"
								Property="BorderBrush" />
							<Setter
								TargetName="indeterminateMark"
								Value="{DynamicResource DisabledColor}"
								Property="Fill" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ProgressBar}"
		x:Key="{x:Type ProgressBar}">
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultBackground}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource DefaultColor}" />
		<Style.Triggers>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="BorderBrush"
					Value="{DynamicResource DisabledColor}" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource DisabledColor}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type RichTextBox}"
		x:Key="{x:Type RichTextBox}">
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultBackgroundOpaque}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="FontWeight"
			Value="{DynamicResource DefaultFontWeight}" />
		<Setter
			Property="FontSize"
			Value="13" />
		<Style.Triggers>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="BorderBrush"
					Value="{DynamicResource DisabledColor}" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource DisabledColor}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type PasswordBox}"
		x:Key="{x:Type PasswordBox}">
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultBackgroundOpaque}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type PasswordBox}">
					<Border
						Name="border"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Background="{TemplateBinding Background}"
						SnapsToDevicePixels="True">
						<ScrollViewer
							Name="PART_ContentHost"
							Focusable="False"
							HorizontalScrollBarVisibility="Hidden"
							VerticalScrollBarVisibility="Hidden"
							Margin="1,-3,-1,2" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource DisabledColor}"
								Property="Foreground" />
							<Setter
								Value="{DynamicResource DisabledColor}"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="border"
								Property="BorderBrush"
								Value="#FF7EB4EA" />
						</Trigger>
						<Trigger
							Property="UIElement.IsKeyboardFocused"
							Value="True">
							<Setter
								TargetName="border"
								Property="BorderBrush"
								Value="#FF569DE5" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type GridSplitter}"
		x:Key="{x:Type GridSplitter}">
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource DefaultColor}" />
		<Style.Triggers>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="BorderBrush"
					Value="{DynamicResource DisabledColor}" />
				<Setter
					Property="Background"
					Value="{DynamicResource DisabledColor}" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource DisabledColor}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type Separator}"
		x:Key="{x:Type Separator}">
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource DefaultColor}" />
		<Style.Triggers>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="BorderBrush"
					Value="{DynamicResource DisabledColor}" />
				<Setter
					Property="Background"
					Value="{DynamicResource DisabledColor}" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource DisabledColor}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type TabItem}"
		x:Key="{x:Type TabItem}">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type TabItem}">
					<Grid>
						<Border
							Name="Border"
							Margin="0,0,0,0"
							Background="#00FFFFFF"
							BorderBrush="#00FFFFFF"
							BorderThickness="0,0,0,2"
							CornerRadius="0">
							<ContentPresenter
								Name="ContentSite"
								VerticalAlignment="Center"
								HorizontalAlignment="Center"
								ContentSource="Header"
								Margin="12,2,12,2"
								RecognizesAccessKey="True" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="TabItem.IsSelected"
							Value="True">
							<Setter
								Property="Panel.ZIndex"
								Value="100" />
							<Setter
								TargetName="Border"
								Value="{DynamicResource DefaultColor}"
								Property="BorderBrush" />
							<Setter
								TargetName="Border"
								Property="BorderThickness"
								Value="0,0,0,2" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="Border"
								Property="BorderBrush"
								Value="#00FFFFFF" />
							<Setter
								Value="{DynamicResource DisabledColor}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="FontWeight"
			Value="{DynamicResource DefaultFontWeight}" />
		<Setter
			Property="FontSize"
			Value="13" />
	</Style>
	<Style
		TargetType="{x:Type TabControl}"
		x:Key="{x:Type TabControl}">
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultBackground}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource DefaultBackground}" />
	</Style>
	<Style
		TargetType="{x:Type Grid}"
		x:Key="{x:Type Grid}">
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
	</Style>
	<Style
		x:Key="FocusVisual">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle
						Margin="2"
						SnapsToDevicePixels="True"
						Stroke="{DynamicResource SystemColors.ControlTextBrushKey}"
						StrokeThickness="1"
						StrokeDashArray="1 2" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBoxItem.ItemsviewHover.Background" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBoxItem.ItemsviewHover.Border" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBoxItem.ItemsviewSelected.Background" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBoxItem.ItemsviewSelected.Border" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBoxItem.ItemsviewSelectedHover.Background" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBoxItem.ItemsviewSelectedHover.Border" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Background" />
	<SolidColorBrush
		x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Border" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBoxItem.ItemsviewFocus.Border" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBoxItem.ItemsviewHoverFocus.Background" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBoxItem.ItemsviewHoverFocus.Border" />
	<Style
		TargetType="{x:Type ComboBoxItem}"
		x:Key="{x:Type ComboBoxItem}">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Padding"
			Value="4,1" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter
			Property="VerticalContentAlignment"
			Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="BorderBrush"
			Value="#00FFFFFF" />
		<Setter
			Property="BorderThickness"
			Value="1" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{StaticResource FocusVisual}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ComboBoxItem}">
					<Border
						Name="Bd"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}"
						SnapsToDevicePixels="True"
						Background="{DynamicResource DefaultBackground}"
						BorderBrush="{DynamicResource DefaultBackground}">
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="False" />
								<Condition
									Property="UIElement.IsMouseOver"
									Value="True" />
								<Condition
									Property="UIElement.IsKeyboardFocused"
									Value="False" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="Bd"
								Property="Background"
								Value="#1926A0DA" />
							<Setter
								TargetName="Bd"
								Property="BorderBrush"
								Value="{StaticResource ComboBoxItem.ItemsviewHover.Border}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="True" />
								<Condition
									Property="UIElement.IsMouseOver"
									Value="False" />
								<Condition
									Property="UIElement.IsKeyboardFocused"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="Bd"
								Property="Background"
								Value="#1926A0DA" />
							<Setter
								TargetName="Bd"
								Property="BorderBrush"
								Value="{StaticResource ComboBoxItem.ItemsviewSelected.Border}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="True" />
								<Condition
									Property="UIElement.IsMouseOver"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="Bd"
								Property="Background"
								Value="#1926A0DA" />
							<Setter
								TargetName="Bd"
								Property="BorderBrush"
								Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Border}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="True" />
								<Condition
									Property="UIElement.IsMouseOver"
									Value="False" />
								<Condition
									Property="UIElement.IsKeyboardFocused"
									Value="False" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="Bd"
								Value="{DynamicResource DefaultBackground}"
								Property="Background" />
							<Setter
								TargetName="Bd"
								Value="{DynamicResource DefaultBackground}"
								Property="BorderBrush" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="False" />
								<Condition
									Property="UIElement.IsMouseOver"
									Value="False" />
								<Condition
									Property="UIElement.IsKeyboardFocused"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="Bd"
								Property="BorderBrush"
								Value="{StaticResource ComboBoxItem.ItemsviewFocus.Border}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="False" />
								<Condition
									Property="UIElement.IsMouseOver"
									Value="True" />
								<Condition
									Property="UIElement.IsKeyboardFocused"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="Bd"
								Property="Background"
								Value="#1926A0DA" />
							<Setter
								TargetName="Bd"
								Property="BorderBrush"
								Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Border}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<LinearGradientBrush
		EndPoint="0,1"
		StartPoint="0,0"
		x:Key="ComboBox.Static.Background">
		<GradientStop
			Color="#FFF0F0F0"
			Offset="0.0" />
		<GradientStop
			Color="#FFE5E5E5"
			Offset="1.0" />
	</LinearGradientBrush>
	<SolidColorBrush
		Color="#FFACACAC"
		x:Key="ComboBox.Static.Border" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBox.Static.Editable.Background" />
	<SolidColorBrush
		Color="#FFABADB3"
		x:Key="ComboBox.Static.Editable.Border" />
	<SolidColorBrush
		Color="Transparent"
		x:Key="ComboBox.Static.Editable.Button.Background" />
	<SolidColorBrush
		Color="Transparent"
		x:Key="ComboBox.Static.Editable.Button.Border" />
	<SolidColorBrush
		Color="#FF000000"
		x:Key="ComboBox.MouseOver.Glyph" />
	<LinearGradientBrush
		EndPoint="0,1"
		StartPoint="0,0"
		x:Key="ComboBox.MouseOver.Background">
		<GradientStop
			Color="#FFECF4FC"
			Offset="0.0" />
		<GradientStop
			Color="#FFDCECFC"
			Offset="1.0" />
	</LinearGradientBrush>
	<SolidColorBrush
		Color="#FF7EB4EA"
		x:Key="ComboBox.MouseOver.Border" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBox.MouseOver.Editable.Background" />
	<SolidColorBrush
		Color="#FF7EB4EA"
		x:Key="ComboBox.MouseOver.Editable.Border" />
	<LinearGradientBrush
		EndPoint="0,1"
		StartPoint="0,0"
		x:Key="ComboBox.MouseOver.Editable.Button.Background">
		<GradientStop
			Color="#FFEBF4FC"
			Offset="0.0" />
		<GradientStop
			Color="#FFDCECFC"
			Offset="1.0" />
	</LinearGradientBrush>
	<SolidColorBrush
		Color="#FF7EB4EA"
		x:Key="ComboBox.MouseOver.Editable.Button.Border" />
	<SolidColorBrush
		Color="#FF000000"
		x:Key="ComboBox.Pressed.Glyph" />
	<LinearGradientBrush
		EndPoint="0,1"
		StartPoint="0,0"
		x:Key="ComboBox.Pressed.Background">
		<GradientStop
			Color="#FFDAECFC"
			Offset="0.0" />
		<GradientStop
			Color="#FFC4E0FC"
			Offset="1.0" />
	</LinearGradientBrush>
	<SolidColorBrush
		Color="#FF569DE5"
		x:Key="ComboBox.Pressed.Border" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBox.Pressed.Editable.Background" />
	<SolidColorBrush
		Color="#FF569DE5"
		x:Key="ComboBox.Pressed.Editable.Border" />
	<LinearGradientBrush
		EndPoint="0,1"
		StartPoint="0,0"
		x:Key="ComboBox.Pressed.Editable.Button.Background">
		<GradientStop
			Color="#FFDAEBFC"
			Offset="0.0" />
		<GradientStop
			Color="#FFC4E0FC"
			Offset="1.0" />
	</LinearGradientBrush>
	<SolidColorBrush
		Color="#FF569DE5"
		x:Key="ComboBox.Pressed.Editable.Button.Border" />
	<SolidColorBrush
		Color="#FFBFBFBF"
		x:Key="ComboBox.Disabled.Glyph" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBox.Disabled.Background" />
	<SolidColorBrush
		Color="#FFD9D9D9"
		x:Key="ComboBox.Disabled.Border" />
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="ComboBox.Disabled.Editable.Background" />
	<SolidColorBrush
		Color="#FFBFBFBF"
		x:Key="ComboBox.Disabled.Editable.Border" />
	<SolidColorBrush
		Color="Transparent"
		x:Key="ComboBox.Disabled.Editable.Button.Background" />
	<SolidColorBrush
		Color="Transparent"
		x:Key="ComboBox.Disabled.Editable.Button.Border" />
	<SolidColorBrush
		Color="#FF606060"
		x:Key="ComboBox.Static.Glyph" />
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="ComboBoxToggleButton">
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="IsTabStop"
			Value="False" />
		<Setter
			Property="Focusable"
			Value="False" />
		<Setter
			Property="ButtonBase.ClickMode"
			Value="Press" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Border
						Name="templateRoot"
						SnapsToDevicePixels="True"
						Background="{DynamicResource DefaultBackground}"
						BorderThickness="{TemplateBinding BorderThickness}"
						BorderBrush="{DynamicResource DefaultColor}">
						<Border
							Name="splitBorder"
							Width="{DynamicResource SystemParameters.VerticalScrollBarWidthKey}"
							SnapsToDevicePixels="True"
							Margin="0"
							HorizontalAlignment="Right"
							BorderThickness="1"
							BorderBrush="#00FFFFFF">
							<Path
								Name="arrow"
								VerticalAlignment="Center"
								Margin="0"
								HorizontalAlignment="Center"
								Fill="{DynamicResource DefaultColor}"
								Data="F1 M0,0 L2.667,2.66665 L5.3334,0 L5.3334,-1.78168 L2.6667,0.88501 L0,-1.78168 L0,0" />
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="true"
									Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
								<Condition
									Value="false"
									Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="false"
									Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="true"
									Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="templateRoot"
								Value="{DynamicResource DefaultBackgroundOpaque}"
								Property="Background" />
							<Setter
								TargetName="templateRoot"
								Property="BorderBrush"
								Value="{StaticResource ComboBox.Static.Editable.Border}" />
							<Setter
								TargetName="splitBorder"
								Property="Background"
								Value="#1926A0DA" />
							<Setter
								TargetName="splitBorder"
								Property="BorderBrush"
								Value="{StaticResource ComboBox.Static.Editable.Button.Border}" />
						</MultiDataTrigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="arrow"
								Property="Fill"
								Value="{StaticResource ComboBox.MouseOver.Glyph}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="true"
									Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="false"
									Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="templateRoot"
								Value="{DynamicResource DefaultHover}"
								Property="Background" />
							<Setter
								TargetName="templateRoot"
								Value="{DynamicResource DefaultColor}"
								Property="BorderBrush" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="true"
									Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="true"
									Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="templateRoot"
								Property="Background"
								Value="#1926A0DA" />
							<Setter
								TargetName="templateRoot"
								Value="{DynamicResource DisabledColor}"
								Property="BorderBrush" />
							<Setter
								TargetName="splitBorder"
								Property="Background"
								Value="#1926A0DA" />
							<Setter
								TargetName="splitBorder"
								Value="{DynamicResource DisabledColor}"
								Property="BorderBrush" />
						</MultiDataTrigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="arrow"
								Property="Fill"
								Value="{StaticResource ComboBox.Pressed.Glyph}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="true"
									Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="false"
									Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="templateRoot"
								Property="Background"
								Value="#1926A0DA" />
							<Setter
								TargetName="templateRoot"
								Value="{DynamicResource DisabledColor}"
								Property="BorderBrush" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="true"
									Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="true"
									Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="templateRoot"
								Property="Background"
								Value="#1926A0DA" />
							<Setter
								TargetName="templateRoot"
								Value="{DynamicResource DisabledColor}"
								Property="BorderBrush" />
							<Setter
								TargetName="splitBorder"
								Property="Background"
								Value="#1926A0DA" />
							<Setter
								TargetName="splitBorder"
								Value="{DynamicResource DisabledColor}"
								Property="BorderBrush" />
						</MultiDataTrigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="arrow"
								Value="{DynamicResource DisabledColor}"
								Property="Fill" />
							<Setter
								TargetName="templateRoot"
								Value="{DynamicResource DisabledColor}"
								Property="BorderBrush" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="false"
									Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="false"
									Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="templateRoot"
								Value="{DynamicResource DisabledColor}"
								Property="BorderBrush" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="false"
									Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="true"
									Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="templateRoot"
								Value="{DynamicResource DisabledColor}"
								Property="Background" />
							<Setter
								TargetName="templateRoot"
								Value="{DynamicResource DisabledColor}"
								Property="BorderBrush" />
							<Setter
								TargetName="splitBorder"
								Value="{DynamicResource DisabledColor}"
								Property="Background" />
							<Setter
								TargetName="splitBorder"
								Value="{DynamicResource DisabledColor}"
								Property="BorderBrush" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate
		TargetType="{x:Type ComboBox}"
		x:Key="ComboBoxTemplate">
		<Grid
			Name="templateRoot"
			SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition
					Width="*" />
				<ColumnDefinition
					MinWidth="{DynamicResource SystemParameters.VerticalScrollBarWidthKey}"
					Width="0" />
			</Grid.ColumnDefinitions>
			<Popup
				Name="PART_Popup"
				AllowsTransparency="True"
				Grid.ColumnSpan="2"
				Margin="1"
				PopupAnimation="{DynamicResource SystemParameters.ComboBoxPopupAnimationKey}"
				Placement="Bottom"
				IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
				<Themes:SystemDropShadowChrome
					Name="shadow"
					Color="Transparent"
					MaxHeight="{TemplateBinding MaxDropDownHeight}"
					MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
					<Border
						Name="dropDownBorder"
						BorderBrush="{DynamicResource DefaultColor}"
						BorderThickness="1"
						Background="{DynamicResource DefaultBackgroundOpaque}">
						<ScrollViewer
							Name="DropDownScrollViewer">
							<Grid
								Name="grid"
								RenderOptions.ClearTypeHint="Enabled">
								<Canvas
									Name="canvas"
									HorizontalAlignment="Left"
									Height="0"
									VerticalAlignment="Top"
									Width="0">
									<Rectangle
										Name="opaqueRect"
										Fill="{Binding Background, ElementName=dropDownBorder}"
										Height="{Binding ActualHeight, ElementName=dropDownBorder}"
										Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
								</Canvas>
								<ItemsPresenter
									Name="ItemsPresenter"
									KeyboardNavigation.DirectionalNavigation="Contained"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</ScrollViewer>
					</Border>
				</Themes:SystemDropShadowChrome>
			</Popup>
			<ToggleButton
				Name="toggleButton"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				Background="{TemplateBinding Background}"
				Grid.ColumnSpan="2"
				Style="{StaticResource ComboBoxToggleButton}"
				IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
			<ContentPresenter
				Name="contentPresenter"
				ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
				ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
				Content="{TemplateBinding SelectionBoxItem}"
				ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
				HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
				IsHitTestVisible="False"
				Margin="{TemplateBinding Padding}"
				SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
				VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger
				SourceName="PART_Popup"
				Property="Popup.HasDropShadow"
				Value="True">
				<Setter
					TargetName="shadow"
					Property="Margin"
					Value="0,0,5,5" />
				<Setter
					TargetName="shadow"
					Property="Themes:SystemDropShadowChrome.Color"
					Value="#71000000" />
			</Trigger>
			<Trigger
				Property="ItemsControl.HasItems"
				Value="False">
				<Setter
					TargetName="dropDownBorder"
					Property="Height"
					Value="95" />
			</Trigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					TargetName="dropDownBorder"
					Value="{DynamicResource DisabledColor}"
					Property="BorderBrush" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition
						Property="ItemsControl.IsGrouping"
						Value="True" />
					<Condition
						Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
						Value="False" />
				</MultiTrigger.Conditions>
				<Setter
					Property="CanContentScroll"
					Value="False" />
			</MultiTrigger>
			<Trigger
				SourceName="DropDownScrollViewer"
				Property="CanContentScroll"
				Value="False">
				<Setter
					TargetName="opaqueRect"
					Property="Canvas.Top"
					Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
				<Setter
					TargetName="opaqueRect"
					Property="Canvas.Left"
					Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<SolidColorBrush
		Color="#1926A0DA"
		x:Key="TextBox.Static.Background" />
	<Style
		TargetType="{x:Type TextBox}"
		x:Key="ComboBoxEditableTextBox">
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="UIElement.AllowDrop"
			Value="True" />
		<Setter
			Property="MinWidth"
			Value="0" />
		<Setter
			Property="MinHeight"
			Value="0" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{x:Null}" />
		<Setter
			Property="ScrollViewer.PanningMode"
			Value="VerticalFirst" />
		<Setter
			Property="Stylus.IsFlicksEnabled"
			Value="False" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type TextBox}">
					<ScrollViewer
						Name="PART_ContentHost"
						Background="#00FFFFFF"
						Focusable="False"
						HorizontalScrollBarVisibility="Hidden"
						VerticalScrollBarVisibility="Hidden" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate
		TargetType="{x:Type ComboBox}"
		x:Key="ComboBoxEditableTemplate">
		<Grid
			Name="templateRoot"
			SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition
					Width="*" />
				<ColumnDefinition
					MinWidth="{DynamicResource SystemParameters.VerticalScrollBarWidthKey}"
					Width="0" />
			</Grid.ColumnDefinitions>
			<Popup
				Name="PART_Popup"
				AllowsTransparency="True"
				Grid.ColumnSpan="2"
				PopupAnimation="{DynamicResource SystemParameters.ComboBoxPopupAnimationKey}"
				Placement="Bottom"
				IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
				<Themes:SystemDropShadowChrome
					Name="shadow"
					Color="Transparent"
					MaxHeight="{TemplateBinding MaxDropDownHeight}"
					MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
					<Border
						Name="dropDownBorder"
						BorderBrush="{DynamicResource SystemColors.WindowFrameBrushKey}"
						BorderThickness="1"
						Background="{DynamicResource SystemColors.WindowBrushKey}">
						<ScrollViewer
							Name="DropDownScrollViewer">
							<Grid
								Name="grid"
								RenderOptions.ClearTypeHint="Enabled">
								<Canvas
									Name="canvas"
									HorizontalAlignment="Left"
									Height="0"
									VerticalAlignment="Top"
									Width="0">
									<Rectangle
										Name="opaqueRect"
										Fill="{Binding Background, ElementName=dropDownBorder}"
										Height="{Binding ActualHeight, ElementName=dropDownBorder}"
										Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
								</Canvas>
								<ItemsPresenter
									Name="ItemsPresenter"
									KeyboardNavigation.DirectionalNavigation="Contained"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</ScrollViewer>
					</Border>
				</Themes:SystemDropShadowChrome>
			</Popup>
			<ToggleButton
				Name="toggleButton"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				Background="{TemplateBinding Background}"
				Grid.ColumnSpan="2"
				Style="{StaticResource ComboBoxToggleButton}"
				IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
			<Border
				Name="border"
				Margin="{TemplateBinding BorderThickness}"
				Background="{StaticResource TextBox.Static.Background}">
				<TextBox
					Name="PART_EditableTextBox"
					HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
					Margin="{TemplateBinding Padding}"
					VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
					Style="{StaticResource ComboBoxEditableTextBox}"
					IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger
				Property="UIElement.IsKeyboardFocusWithin"
				Value="True">
				<Setter
					Value="{DynamicResource DefaultColor}"
					Property="Foreground" />
			</Trigger>
			<Trigger
				SourceName="PART_Popup"
				Property="Popup.HasDropShadow"
				Value="True">
				<Setter
					TargetName="shadow"
					Property="Margin"
					Value="0,0,5,5" />
				<Setter
					TargetName="shadow"
					Property="Themes:SystemDropShadowChrome.Color"
					Value="#71000000" />
			</Trigger>
			<Trigger
				Property="ItemsControl.HasItems"
				Value="False">
				<Setter
					TargetName="dropDownBorder"
					Property="Height"
					Value="95" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition
						Property="ItemsControl.IsGrouping"
						Value="True" />
					<Condition
						Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
						Value="False" />
				</MultiTrigger.Conditions>
				<Setter
					Property="CanContentScroll"
					Value="False" />
			</MultiTrigger>
			<Trigger
				SourceName="DropDownScrollViewer"
				Property="CanContentScroll"
				Value="False">
				<Setter
					TargetName="opaqueRect"
					Property="Canvas.Top"
					Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
				<Setter
					TargetName="opaqueRect"
					Property="Canvas.Left"
					Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style
		TargetType="{x:Type ComboBox}"
		x:Key="{x:Type ComboBox}">
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{StaticResource FocusVisual}" />
		<Setter
			Property="Background"
			Value="{StaticResource ComboBox.Static.Background}" />
		<Setter
			Property="BorderBrush"
			Value="{StaticResource ComboBox.Static.Border}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="BorderThickness"
			Value="1" />
		<Setter
			Property="HorizontalScrollBarVisibility"
			Value="Auto" />
		<Setter
			Property="VerticalScrollBarVisibility"
			Value="Auto" />
		<Setter
			Property="Padding"
			Value="6,3,5,3" />
		<Setter
			Property="CanContentScroll"
			Value="True" />
		<Setter
			Property="ScrollViewer.PanningMode"
			Value="Both" />
		<Setter
			Property="Stylus.IsFlicksEnabled"
			Value="False" />
		<Setter
			Property="Template"
			Value="{StaticResource ComboBoxTemplate}" />
		<Style.Triggers>
			<Trigger
				Property="ComboBox.IsEditable"
				Value="True">
				<Setter
					Property="IsTabStop"
					Value="False" />
				<Setter
					Property="Padding"
					Value="2" />
				<Setter
					Property="Template"
					Value="{StaticResource ComboBoxEditableTemplate}" />
			</Trigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="Foreground"
					Value="{DynamicResource DisabledColor}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type ListBox}"
		x:Key="{x:Type ListBox}">
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultBackground}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource DefaultColor}" />
	</Style>
	<Style
		TargetType="{x:Type ListBoxItem}"
		x:Key="{x:Type ListBoxItem}">
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
	</Style>
	<Style
		TargetType="{x:Type Controls2:AutoCompleteBox}"
		x:Key="{x:Type Controls2:AutoCompleteBox}">
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultBackground}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource DefaultColor}" />
		<Style.Resources>
			<ResourceDictionary>
				<Style
					TargetType="{x:Type ListBox}"
					x:Key="{x:Type ListBox}">
					<Setter
						Property="MaxHeight"
						Value="1000" />
				</Style>
			</ResourceDictionary>
		</Style.Resources>
	</Style>
	<SolidColorBrush
		Color="#FF5593FF"
		x:Key="Expander.MouseOver.Circle.Stroke" />
	<SolidColorBrush
		Color="#FFF3F9FF"
		x:Key="Expander.MouseOver.Circle.Fill" />
	<SolidColorBrush
		Color="#FF000000"
		x:Key="Expander.MouseOver.Arrow.Stroke" />
	<SolidColorBrush
		Color="#FF3C77DD"
		x:Key="Expander.Pressed.Circle.Stroke" />
	<SolidColorBrush
		Color="#FFD9ECFF"
		x:Key="Expander.Pressed.Circle.Fill" />
	<SolidColorBrush
		Color="#FF000000"
		x:Key="Expander.Pressed.Arrow.Stroke" />
	<SolidColorBrush
		Color="#FFBCBCBC"
		x:Key="Expander.Disabled.Circle.Stroke" />
	<SolidColorBrush
		Color="#FFE6E6E6"
		x:Key="Expander.Disabled.Circle.Fill" />
	<SolidColorBrush
		Color="#FF707070"
		x:Key="Expander.Disabled.Arrow.Stroke" />
	<SolidColorBrush
		Color="#FFFFFFFF"
		x:Key="Expander.Static.Circle.Fill" />
	<SolidColorBrush
		Color="#FF333333"
		x:Key="Expander.Static.Circle.Stroke" />
	<SolidColorBrush
		Color="#FF333333"
		x:Key="Expander.Static.Arrow.Stroke" />
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="ExpanderRightHeaderStyle">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Border
						Padding="{TemplateBinding Padding}">
						<Grid
							Background="#00FFFFFF"
							SnapsToDevicePixels="False">
							<Grid.RowDefinitions>
								<RowDefinition
									Height="19" />
								<RowDefinition
									Height="*" />
							</Grid.RowDefinitions>
							<Grid>
								<FrameworkElement.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform
													Angle="-90" />
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</FrameworkElement.LayoutTransform>
								<Ellipse
									Name="circle"
									Fill="{DynamicResource DefaultBackground}"
									HorizontalAlignment="Center"
									Height="19"
									Stroke="{DynamicResource DefaultColor}"
									VerticalAlignment="Center"
									Width="19" />
								<Path
									Name="arrow"
									Data="M1,1.5 L4.5,5 L8,1.5"
									HorizontalAlignment="Center"
									SnapsToDevicePixels="False"
									Stroke="{DynamicResource DefaultColor}"
									StrokeThickness="2"
									VerticalAlignment="Center" />
							</Grid>
							<ContentPresenter
								HorizontalAlignment="Center"
								Margin="0,4,0,0"
								Grid.Row="1"
								RecognizesAccessKey="True"
								SnapsToDevicePixels="True"
								VerticalAlignment="Top" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="true">
							<Setter
								TargetName="arrow"
								Property="Data"
								Value="M1,4.5 L4.5,1 L8,4.5" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="circle"
								Property="Stroke"
								Value="{StaticResource Expander.MouseOver.Circle.Stroke}" />
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="{StaticResource Expander.MouseOver.Circle.Fill}" />
							<Setter
								TargetName="arrow"
								Property="Stroke"
								Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="circle"
								Property="Stroke"
								Value="{StaticResource Expander.Pressed.Circle.Stroke}" />
							<Setter
								TargetName="circle"
								Property="StrokeThickness"
								Value="1.5" />
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="{StaticResource Expander.Pressed.Circle.Fill}" />
							<Setter
								TargetName="arrow"
								Property="Stroke"
								Value="{StaticResource Expander.Pressed.Arrow.Stroke}" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="circle"
								Property="Stroke"
								Value="{StaticResource Expander.Disabled.Circle.Stroke}" />
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="{StaticResource Expander.Disabled.Circle.Fill}" />
							<Setter
								TargetName="arrow"
								Property="Stroke"
								Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="ExpanderUpHeaderStyle">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Border
						Padding="{TemplateBinding Padding}">
						<Grid
							Background="#00FFFFFF"
							SnapsToDevicePixels="False">
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									Width="19" />
								<ColumnDefinition
									Width="*" />
							</Grid.ColumnDefinitions>
							<Grid>
								<FrameworkElement.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform
													Angle="180" />
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</FrameworkElement.LayoutTransform>
								<Ellipse
									Name="circle"
									Fill="{DynamicResource DefaultBackground}"
									HorizontalAlignment="Center"
									Height="19"
									Stroke="{DynamicResource DefaultColor}"
									VerticalAlignment="Center"
									Width="19" />
								<Path
									Name="arrow"
									Data="M1,1.5 L4.5,5 L8,1.5"
									HorizontalAlignment="Center"
									SnapsToDevicePixels="False"
									Stroke="{DynamicResource DefaultColor}"
									StrokeThickness="2"
									VerticalAlignment="Center" />
							</Grid>
							<ContentPresenter
								Grid.Column="1"
								HorizontalAlignment="Left"
								Margin="4,0,0,0"
								RecognizesAccessKey="True"
								SnapsToDevicePixels="True"
								VerticalAlignment="Center" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="true">
							<Setter
								TargetName="arrow"
								Property="Data"
								Value="M1,4.5 L4.5,1 L8,4.5" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="circle"
								Property="Stroke"
								Value="{StaticResource Expander.MouseOver.Circle.Stroke}" />
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="{StaticResource Expander.MouseOver.Circle.Fill}" />
							<Setter
								TargetName="arrow"
								Property="Stroke"
								Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="circle"
								Property="Stroke"
								Value="{StaticResource Expander.Pressed.Circle.Stroke}" />
							<Setter
								TargetName="circle"
								Property="StrokeThickness"
								Value="1.5" />
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="{StaticResource Expander.Pressed.Circle.Fill}" />
							<Setter
								TargetName="arrow"
								Property="Stroke"
								Value="{StaticResource Expander.Pressed.Arrow.Stroke}" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="circle"
								Property="Stroke"
								Value="{StaticResource Expander.Disabled.Circle.Stroke}" />
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="{StaticResource Expander.Disabled.Circle.Fill}" />
							<Setter
								TargetName="arrow"
								Property="Stroke"
								Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="ExpanderLeftHeaderStyle">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Border
						Padding="{TemplateBinding Padding}">
						<Grid
							Background="#00FFFFFF"
							SnapsToDevicePixels="False">
							<Grid.RowDefinitions>
								<RowDefinition
									Height="19" />
								<RowDefinition
									Height="*" />
							</Grid.RowDefinitions>
							<Grid>
								<FrameworkElement.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform
													Angle="90" />
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</FrameworkElement.LayoutTransform>
								<Ellipse
									Name="circle"
									Fill="{DynamicResource DefaultBackground}"
									HorizontalAlignment="Center"
									Height="19"
									Stroke="{DynamicResource DefaultColor}"
									VerticalAlignment="Center"
									Width="19" />
								<Path
									Name="arrow"
									Data="M1,1.5 L4.5,5 L8,1.5"
									HorizontalAlignment="Center"
									SnapsToDevicePixels="False"
									Stroke="{DynamicResource DefaultColor}"
									StrokeThickness="2"
									VerticalAlignment="Center" />
							</Grid>
							<ContentPresenter
								HorizontalAlignment="Center"
								Margin="0,4,0,0"
								Grid.Row="1"
								RecognizesAccessKey="True"
								SnapsToDevicePixels="True"
								VerticalAlignment="Top" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="true">
							<Setter
								TargetName="arrow"
								Property="Data"
								Value="M1,4.5 L4.5,1 L8,4.5" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="circle"
								Property="Stroke"
								Value="{StaticResource Expander.MouseOver.Circle.Stroke}" />
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="{StaticResource Expander.MouseOver.Circle.Fill}" />
							<Setter
								TargetName="arrow"
								Property="Stroke"
								Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="circle"
								Property="Stroke"
								Value="{StaticResource Expander.Pressed.Circle.Stroke}" />
							<Setter
								TargetName="circle"
								Property="StrokeThickness"
								Value="1.5" />
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="{StaticResource Expander.Pressed.Circle.Fill}" />
							<Setter
								TargetName="arrow"
								Property="Stroke"
								Value="{StaticResource Expander.Pressed.Arrow.Stroke}" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="circle"
								Property="Stroke"
								Value="{StaticResource Expander.Disabled.Circle.Stroke}" />
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="{StaticResource Expander.Disabled.Circle.Fill}" />
							<Setter
								TargetName="arrow"
								Property="Stroke"
								Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		x:Key="ExpanderHeaderFocusVisual">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle
							Margin="0"
							SnapsToDevicePixels="True"
							Stroke="#FF000000"
							StrokeThickness="1"
							StrokeDashArray="1 2" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="ExpanderDownHeaderStyle">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Border
						Padding="{TemplateBinding Padding}">
						<Grid
							Background="#00FFFFFF"
							SnapsToDevicePixels="False">
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									Width="19" />
								<ColumnDefinition
									Width="*" />
							</Grid.ColumnDefinitions>
							<Ellipse
								Name="circle"
								Fill="{DynamicResource DefaultBackground}"
								HorizontalAlignment="Center"
								Height="19"
								Stroke="{DynamicResource DefaultColor}"
								VerticalAlignment="Center"
								Width="19" />
							<Path
								Name="arrow"
								Data="M1,1.5 L4.5,5 L8,1.5"
								HorizontalAlignment="Center"
								SnapsToDevicePixels="False"
								Stroke="{DynamicResource DefaultColor}"
								StrokeThickness="2"
								VerticalAlignment="Center" />
							<ContentPresenter
								Grid.Column="1"
								HorizontalAlignment="Left"
								Margin="4,0,0,0"
								RecognizesAccessKey="True"
								SnapsToDevicePixels="True"
								VerticalAlignment="Center" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="true">
							<Setter
								TargetName="arrow"
								Property="Data"
								Value="M1,4.5 L4.5,1 L8,4.5" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="circle"
								Property="Stroke"
								Value="{StaticResource Expander.MouseOver.Circle.Stroke}" />
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="{StaticResource Expander.MouseOver.Circle.Fill}" />
							<Setter
								TargetName="arrow"
								Property="Stroke"
								Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="circle"
								Property="Stroke"
								Value="{StaticResource Expander.Pressed.Circle.Stroke}" />
							<Setter
								TargetName="circle"
								Property="StrokeThickness"
								Value="1.5" />
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="{StaticResource Expander.Pressed.Circle.Fill}" />
							<Setter
								TargetName="arrow"
								Property="Stroke"
								Value="{StaticResource Expander.Pressed.Arrow.Stroke}" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="circle"
								Property="Stroke"
								Value="{StaticResource Expander.Disabled.Circle.Stroke}" />
							<Setter
								TargetName="circle"
								Property="Fill"
								Value="{StaticResource Expander.Disabled.Circle.Fill}" />
							<Setter
								TargetName="arrow"
								Property="Stroke"
								Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type Expander}"
		x:Key="{x:Type Expander}">
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Stretch" />
		<Setter
			Property="VerticalContentAlignment"
			Value="Stretch" />
		<Setter
			Property="BorderBrush"
			Value="#00FFFFFF" />
		<Setter
			Property="BorderThickness"
			Value="1" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Expander}">
					<Border
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Background="{TemplateBinding Background}"
						CornerRadius="3"
						SnapsToDevicePixels="True">
						<DockPanel>
							<ToggleButton
								Name="HeaderSite"
								ContentTemplate="{TemplateBinding HeaderTemplate}"
								ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
								Content="{TemplateBinding Header}"
								DockPanel.Dock="Top"
								Foreground="{TemplateBinding Foreground}"
								FontWeight="{TemplateBinding FontWeight}"
								FontStyle="{TemplateBinding FontStyle}"
								FontStretch="{TemplateBinding FontStretch}"
								FontSize="{TemplateBinding FontSize}"
								FontFamily="{TemplateBinding FontFamily}"
								HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="1"
								MinWidth="0"
								MinHeight="0"
								Padding="{TemplateBinding Padding}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
								Style="{StaticResource ExpanderDownHeaderStyle}"
								IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
							<ContentPresenter
								Name="ExpandSite"
								DockPanel.Dock="Bottom"
								Focusable="False"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								Visibility="Collapsed"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</DockPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="Expander.IsExpanded"
							Value="True">
							<Setter
								TargetName="ExpandSite"
								Property="Visibility"
								Value="Visible" />
						</Trigger>
						<Trigger
							Property="Expander.ExpandDirection"
							Value="Right">
							<Setter
								TargetName="ExpandSite"
								Property="Dock"
								Value="Right" />
							<Setter
								TargetName="HeaderSite"
								Property="Dock"
								Value="Left" />
							<Setter
								TargetName="HeaderSite"
								Property="Style"
								Value="{StaticResource ExpanderRightHeaderStyle}" />
						</Trigger>
						<Trigger
							Property="Expander.ExpandDirection"
							Value="Up">
							<Setter
								TargetName="ExpandSite"
								Property="Dock"
								Value="Top" />
							<Setter
								TargetName="HeaderSite"
								Property="Dock"
								Value="Bottom" />
							<Setter
								TargetName="HeaderSite"
								Property="Style"
								Value="{StaticResource ExpanderUpHeaderStyle}" />
						</Trigger>
						<Trigger
							Property="Expander.ExpandDirection"
							Value="Left">
							<Setter
								TargetName="ExpandSite"
								Property="Dock"
								Value="Left" />
							<Setter
								TargetName="HeaderSite"
								Property="Dock"
								Value="Right" />
							<Setter
								TargetName="HeaderSite"
								Property="Style"
								Value="{StaticResource ExpanderLeftHeaderStyle}" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource SystemColors.GrayTextBrushKey}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<DataTemplate
		x:Key="DvarSearchTemplate">
		<StackPanel
			Orientation="Horizontal">
			<Label
				Width="200"
				Content="{Binding Name}" />
			<Label
				FontStyle="Italic"
				Foreground="#FF7F7F7F"
				Content="{Binding Description}" />
		</StackPanel>
	</DataTemplate>
	<SolidColorBrush
		Color="#FFFFFF"
		x:Key="ScrollBar.Static.Background" />
	<SolidColorBrush
		Color="#F0F0F0"
		x:Key="ScrollBar.Static.Border" />
	<SolidColorBrush
		Color="#FFFFFF"
		x:Key="ScrollBar.Pressed.Glyph" />
	<SolidColorBrush
		Color="#000000"
		x:Key="ScrollBar.MouseOver.Glyph" />
	<SolidColorBrush
		Color="#BFBFBF"
		x:Key="ScrollBar.Disabled.Glyph" />
	<SolidColorBrush
		Color="#606060"
		x:Key="ScrollBar.Static.Glyph" />
	<SolidColorBrush
		Color="#DADADA"
		x:Key="ScrollBar.MouseOver.Background" />
	<SolidColorBrush
		Color="#DADADA"
		x:Key="ScrollBar.MouseOver.Border" />
	<SolidColorBrush
		Color="#606060"
		x:Key="ScrollBar.Pressed.Background" />
	<SolidColorBrush
		Color="#606060"
		x:Key="ScrollBar.Pressed.Border" />
	<SolidColorBrush
		Color="#F0F0F0"
		x:Key="ScrollBar.Disabled.Background" />
	<SolidColorBrush
		Color="#F0F0F0"
		x:Key="ScrollBar.Disabled.Border" />
	<Style
		TargetType="{x:Type RepeatButton}"
		x:Key="ScrollBarButton">
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{StaticResource FocusVisual}" />
		<Setter
			Property="BorderThickness"
			Value="1" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Center" />
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
		<Setter
			Property="Padding"
			Value="1" />
		<Setter
			Property="Focusable"
			Value="False" />
		<Setter
			Property="IsTabStop"
			Value="False" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type RepeatButton}">
					<Border
						Name="border"
						BorderBrush="{DynamicResource DefaultColor}"
						BorderThickness="1"
						Background="{DynamicResource DefaultBackgroundOpaque}"
						SnapsToDevicePixels="True">
						<ContentPresenter
							Name="contentPresenter"
							Focusable="False"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							Margin="{TemplateBinding Padding}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="border"
								Value="{DynamicResource DisabledColor}"
								Property="Background" />
							<Setter
								TargetName="border"
								Value="{DynamicResource DefaultColor}"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="border"
								Value="{DynamicResource DefaultColor}"
								Property="Background" />
							<Setter
								TargetName="border"
								Value="{DynamicResource DefaultColor}"
								Property="BorderBrush" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type RepeatButton}"
		x:Key="RepeatButtonTransparent">
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="Focusable"
			Value="False" />
		<Setter
			Property="IsTabStop"
			Value="False" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type RepeatButton}">
					<Rectangle
						Fill="{TemplateBinding Background}"
						Height="{TemplateBinding Height}"
						Width="{TemplateBinding Width}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush
		Color="#A6A6A6"
		x:Key="ScrollBar.MouseOver.Thumb" />
	<SolidColorBrush
		Color="#606060"
		x:Key="ScrollBar.Pressed.Thumb" />
	<SolidColorBrush
		Color="#CDCDCD"
		x:Key="ScrollBar.Static.Thumb" />
	<Style
		TargetType="{x:Type Thumb}"
		x:Key="ScrollBarThumbVertical">
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="IsTabStop"
			Value="False" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Thumb}">
					<Rectangle
						Name="rectangle"
						Fill="{DynamicResource DefaultColor}"
						Height="{TemplateBinding Height}"
						SnapsToDevicePixels="True"
						Width="{TemplateBinding Width}" />
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="rectangle"
								Value="{DynamicResource DefaultColor}"
								Property="Fill" />
						</Trigger>
						<Trigger
							Property="Thumb.IsDragging"
							Value="True">
							<Setter
								TargetName="rectangle"
								Value="{DynamicResource DefaultColor}"
								Property="Fill" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type Thumb}"
		x:Key="ScrollBarThumbHorizontal">
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="IsTabStop"
			Value="False" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Thumb}">
					<Rectangle
						Name="rectangle"
						Fill="{DynamicResource DefaultColor}"
						Height="{TemplateBinding Height}"
						SnapsToDevicePixels="True"
						Width="{TemplateBinding Width}" />
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="rectangle"
								Value="{DynamicResource DefaultColor}"
								Property="Fill" />
						</Trigger>
						<Trigger
							Property="Thumb.IsDragging"
							Value="True">
							<Setter
								TargetName="rectangle"
								Value="{DynamicResource DefaultColor}"
								Property="Fill" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ScrollBar}"
		x:Key="{x:Type ScrollBar}">
		<Setter
			Property="Stylus.IsPressAndHoldEnabled"
			Value="False" />
		<Setter
			Property="Stylus.IsFlicksEnabled"
			Value="False" />
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultBackground}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="BorderThickness"
			Value="1,0" />
		<Setter
			Property="Width"
			Value="{DynamicResource SystemParameters.VerticalScrollBarWidthKey}" />
		<Setter
			Property="MinWidth"
			Value="{DynamicResource SystemParameters.VerticalScrollBarWidthKey}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ScrollBar}">
					<Grid
						Name="Bg"
						SnapsToDevicePixels="True">
						<Grid.RowDefinitions>
							<RowDefinition
								MaxHeight="{DynamicResource SystemParameters.VerticalScrollBarButtonHeightKey}" />
							<RowDefinition
								Height="0.00001*" />
							<RowDefinition
								MaxHeight="{DynamicResource SystemParameters.VerticalScrollBarButtonHeightKey}" />
						</Grid.RowDefinitions>
						<Border
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							Grid.Row="1" />
						<RepeatButton
							Name="PART_LineUpButton"
							Command="{x:Static ScrollBar.LineUpCommand}"
							IsEnabled="{TemplateBinding IsMouseOver}"
							Style="{StaticResource ScrollBarButton}">
							<Path
								Name="ArrowTop"
								Data="M0,4 C0,4 0,6 0,6 C0,6 3.5,2.5 3.5,2.5 C3.5,2.5 7,6 7,6 C7,6 7,4 7,4 C7,4 3.5,0.5 3.5,0.5 C3.5,0.5 0,4 0,4"
								Fill="{DynamicResource DefaultColor}"
								Margin="3,4,3,3"
								Stretch="Uniform" />
						</RepeatButton>
						<Track
							Name="PART_Track"
							IsDirectionReversed="True"
							IsEnabled="{TemplateBinding IsMouseOver}"
							Grid.Row="1">
							<Track.DecreaseRepeatButton>
								<RepeatButton
									Command="{x:Static ScrollBar.PageUpCommand}"
									Style="{StaticResource RepeatButtonTransparent}" />
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton
									Command="{x:Static ScrollBar.PageDownCommand}"
									Style="{StaticResource RepeatButtonTransparent}" />
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb
									Style="{StaticResource ScrollBarThumbVertical}" />
							</Track.Thumb>
						</Track>
						<RepeatButton
							Name="PART_LineDownButton"
							Command="{x:Static ScrollBar.LineDownCommand}"
							IsEnabled="{TemplateBinding IsMouseOver}"
							Grid.Row="2"
							Style="{StaticResource ScrollBarButton}">
							<Path
								Name="ArrowBottom"
								Data="M0,2.5 C0,2.5 0,0.5 0,0.5 C0,0.5 3.5,4 3.5,4 C3.5,4 7,0.5 7,0.5 C7,0.5 7,2.5 7,2.5 C7,2.5 3.5,6 3.5,6 C3.5,6 0,2.5 0,2.5"
								Fill="{DynamicResource DefaultColor}"
								Margin="3,4,3,3"
								Stretch="Uniform" />
						</RepeatButton>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="true"
									Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" />
								<Condition
									Value="true"
									Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="ArrowBottom"
								Value="{DynamicResource DefaultColor}"
								Property="Fill" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="true"
									Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" />
								<Condition
									Value="true"
									Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="ArrowTop"
								Value="{DynamicResource DefaultColor}"
								Property="Fill" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="true"
									Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" />
								<Condition
									Value="false"
									Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="ArrowBottom"
								Value="{DynamicResource DefaultColor}"
								Property="Fill" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="true"
									Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" />
								<Condition
									Value="false"
									Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="ArrowTop"
								Value="{DynamicResource DefaultColor}"
								Property="Fill" />
						</MultiDataTrigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="ArrowTop"
								Value="{DynamicResource DisabledColor}"
								Property="Fill" />
							<Setter
								TargetName="ArrowBottom"
								Value="{DynamicResource DisabledColor}"
								Property="Fill" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger
				Property="ScrollBar.Orientation"
				Value="Horizontal">
				<Setter
					Property="Width"
					Value="Auto" />
				<Setter
					Property="MinWidth"
					Value="0" />
				<Setter
					Property="Height"
					Value="{DynamicResource SystemParameters.HorizontalScrollBarHeightKey}" />
				<Setter
					Property="MinHeight"
					Value="{DynamicResource SystemParameters.HorizontalScrollBarHeightKey}" />
				<Setter
					Property="BorderThickness"
					Value="0,1" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ScrollBar}">
							<Grid
								Name="Bg"
								SnapsToDevicePixels="True">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										MaxWidth="{DynamicResource SystemParameters.HorizontalScrollBarButtonWidthKey}" />
									<ColumnDefinition
										Width="0.00001*" />
									<ColumnDefinition
										MaxWidth="{DynamicResource SystemParameters.HorizontalScrollBarButtonWidthKey}" />
								</Grid.ColumnDefinitions>
								<Border
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									Background="{TemplateBinding Background}"
									Grid.Column="1" />
								<RepeatButton
									Name="PART_LineLeftButton"
									Command="{x:Static ScrollBar.LineLeftCommand}"
									IsEnabled="{TemplateBinding IsMouseOver}"
									Style="{StaticResource ScrollBarButton}">
									<Path
										Name="ArrowLeft"
										Data="M3.18,7 C3.18,7 5,7 5,7 C5,7 1.81,3.5 1.81,3.5 C1.81,3.5 5,0 5,0 C5,0 3.18,0 3.18,0 C3.18,0 0,3.5 0,3.5 C0,3.5 3.18,7 3.18,7"
										Fill="{DynamicResource DefaultColor}"
										Margin="3"
										Stretch="Uniform" />
								</RepeatButton>
								<Track
									Name="PART_Track"
									Grid.Column="1"
									IsEnabled="{TemplateBinding IsMouseOver}">
									<Track.DecreaseRepeatButton>
										<RepeatButton
											Command="{x:Static ScrollBar.PageLeftCommand}"
											Style="{StaticResource RepeatButtonTransparent}" />
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton
											Command="{x:Static ScrollBar.PageRightCommand}"
											Style="{StaticResource RepeatButtonTransparent}" />
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb
											Style="{StaticResource ScrollBarThumbHorizontal}" />
									</Track.Thumb>
								</Track>
								<RepeatButton
									Name="PART_LineRightButton"
									Grid.Column="2"
									Command="{x:Static ScrollBar.LineRightCommand}"
									IsEnabled="{TemplateBinding IsMouseOver}"
									Style="{StaticResource ScrollBarButton}">
									<Path
										Name="ArrowRight"
										Data="M1.81,7 C1.81,7 0,7 0,7 C0,7 3.18,3.5 3.18,3.5 C3.18,3.5 0,0 0,0 C0,0 1.81,0 1.81,0 C1.81,0 5,3.5 5,3.5 C5,3.5 1.81,7 1.81,7"
										Fill="{DynamicResource DefaultColor}"
										Margin="3"
										Stretch="Uniform" />
								</RepeatButton>
							</Grid>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="true"
											Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" />
										<Condition
											Value="true"
											Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" />
									</MultiDataTrigger.Conditions>
									<Setter
										TargetName="ArrowRight"
										Value="{DynamicResource DefaultColor}"
										Property="Fill" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="true"
											Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" />
										<Condition
											Value="true"
											Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" />
									</MultiDataTrigger.Conditions>
									<Setter
										TargetName="ArrowLeft"
										Value="{DynamicResource DefaultColor}"
										Property="Fill" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="true"
											Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" />
										<Condition
											Value="false"
											Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" />
									</MultiDataTrigger.Conditions>
									<Setter
										TargetName="ArrowRight"
										Value="{DynamicResource DefaultColor}"
										Property="Fill" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="true"
											Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" />
										<Condition
											Value="false"
											Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" />
									</MultiDataTrigger.Conditions>
									<Setter
										TargetName="ArrowLeft"
										Value="{DynamicResource DefaultColor}"
										Property="Fill" />
								</MultiDataTrigger>
								<Trigger
									Property="IsEnabled"
									Value="False">
									<Setter
										TargetName="ArrowLeft"
										Property="Fill"
										Value="{StaticResource ScrollBar.Disabled.Glyph}" />
									<Setter
										TargetName="ArrowRight"
										Property="Fill"
										Value="{StaticResource ScrollBar.Disabled.Glyph}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Color
		x:Key="HeaderTopColor">#FFC5CBF9</Color>
	<Color
		x:Key="DatagridCurrentCellBorderColor">Black</Color>
	<Color
		x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>
	<Color
		x:Key="NavButtonFrameColor">#FF3843C4</Color>
	<Style
		TargetType="{x:Type ContextMenu}"
		x:Key="{x:Type ContextMenu}">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="Grid.IsSharedSizeScope"
			Value="True" />
		<Setter
			Property="ContextMenu.HasDropShadow"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ContextMenu}">
					<Border
						Name="Border"
						Background="{DynamicResource DefaultBackgroundOpaque}"
						BorderThickness="1"
						BorderBrush="{DynamicResource DefaultColor}">
						<StackPanel
							IsItemsHost="True"
							KeyboardNavigation.DirectionalNavigation="Cycle" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ContextMenu.HasDropShadow"
							Value="True">
							<Setter
								TargetName="Border"
								Property="Border.Padding"
								Value="0,3,0,3" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type MenuItem}"
		x:Key="{x:Type MenuItem}">
		<Setter
			Property="Foreground"
			Value="{DynamicResource DefaultColor}" />
	</Style>
	<Color
		x:Key="WindowColor">#FFE8EDF9</Color>
	<Color
		x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
	<Color
		x:Key="ContentAreaColorDark">#FF7381F9</Color>
	<Color
		x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
	<Color
		x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
	<Color
		x:Key="DisabledForegroundColor">#FF888888</Color>
	<Color
		x:Key="SelectedBackgroundColor">#36707070</Color>
	<Color
		x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>
	<Color
		x:Key="ControlLightColor">White</Color>
	<Color
		x:Key="ControlMediumColor">#FF7381F9</Color>
	<Color
		x:Key="ControlDarkColor">#FF211AA9</Color>
	<Color
		x:Key="ControlMouseOverColor">#FF3843C4</Color>
	<Color
		x:Key="ControlPressedColor">#FF211AA9</Color>
	<Color
		x:Key="GlyphColor">#FF444444</Color>
	<Color
		x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>
	<Color
		x:Key="BorderLightColor">#FFCCCCCC</Color>
	<Color
		x:Key="BorderMediumColor">#FF888888</Color>
	<Color
		x:Key="BorderDarkColor">#FF444444</Color>
	<Color
		x:Key="PressedBorderLightColor">#FF888888</Color>
	<Color
		x:Key="PressedBorderDarkColor">#FF444444</Color>
	<Color
		x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
	<Color
		x:Key="DisabledBorderDarkColor">#FF888888</Color>
	<Color
		x:Key="DefaultBorderBrushDarkColor">Black</Color>
	<LinearGradientBrush
		EndPoint="0.5,1"
		StartPoint="0.5,0"
		x:Key="MenuPopupBrush">
		<GradientStop
			Color="{DynamicResource ControlLightColor}"
			Offset="0" />
		<GradientStop
			Color="{DynamicResource ControlMediumColor}"
			Offset="0.5" />
		<GradientStop
			Color="{DynamicResource ControlLightColor}"
			Offset="1" />
	</LinearGradientBrush>
	<Style
		TargetType="{x:Type Thumb}"
		x:Key="GridViewColumnHeaderGripper">
		<Setter
			Property="Width"
			Value="18" />
		<Setter
			Property="Background"
			Value="{DynamicResource DefaultColor}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Thumb}">
					<Border
						Padding="{TemplateBinding Padding}"
						Background="#00FFFFFF">
						<Rectangle
							HorizontalAlignment="Center"
							Width="1"
							Fill="{TemplateBinding Background}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="BorderBrush">
			<Setter.Value>
				<LinearGradientBrush
					EndPoint="0.5,1"
					StartPoint="0.5,0">
					<GradientStop
						Color="Black"
						Offset="0" />
					<GradientStop
						Color="White"
						Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
	</Style>
	<LinearGradientBrush
		StartPoint="0,0"
		EndPoint="1,0"
		x:Key="ProgressBarIndicatorAnimatedFill">
		<GradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop
					Color="#000000FF"
					Offset="0" />
				<GradientStop
					Color="#600000FF"
					Offset="0.4" />
				<GradientStop
					Color="#600000FF"
					Offset="0.6" />
				<GradientStop
					Color="#000000FF"
					Offset="1" />
			</GradientStopCollection>
		</GradientBrush.GradientStops>
	</LinearGradientBrush>
	<Style
		TargetType="{x:Type GridViewColumnHeader}"
		x:Key="{x:Type GridViewColumnHeader}">
		<Setter
			Property="HorizontalContentAlignment"
			Value="Center" />
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource SystemColors.ControlTextBrushKey}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type GridViewColumnHeader}">
					<Grid
						Background="{DynamicResource DefaultBackground}"
						Margin="0,0,0,0">
						<Border
							Name="HeaderBorder"
							BorderThickness="0,0,1,1"
							Padding="0,0,0,0"
							BorderBrush="{DynamicResource DefaultColor}"
							Background="{DynamicResource DefaultBackground}">
							<ContentPresenter
								Name="HeaderContent"
								Margin="0,0,0,1"
								RecognizesAccessKey="True"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								TextBlock.Foreground="{DynamicResource DefaultColor}" />
						</Border>
						<Thumb
							Name="PART_HeaderGripper"
							HorizontalAlignment="Right"
							Margin="0,0,-9,0"
							Style="{StaticResource GridViewColumnHeaderGripper}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger
				Property="GridViewColumnHeader.Role"
				Value="Floating">
				<Setter
					Property="UIElement.Opacity"
					Value="0.7" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type GridViewColumnHeader}">
							<Canvas
								Name="PART_FloatingHeaderCanvas">
								<Rectangle
									Fill="#FFFF0000"
									Width="{TemplateBinding ActualWidth}"
									Height="{TemplateBinding ActualHeight}" />
							</Canvas>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger
				Property="GridViewColumnHeader.Role"
				Value="Padding">
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type GridViewColumnHeader}">
							<Border
								Name="HeaderBorder"
								BorderThickness="0,1,0,1"
								Background="{DynamicResource DefaultBackgroundOpaque}"
								BorderBrush="{DynamicResource DefaultColor}" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type ListView}"
		x:Key="{x:Type ListView}">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="HorizontalScrollBarVisibility"
			Value="Auto" />
		<Setter
			Property="VerticalScrollBarVisibility"
			Value="Auto" />
		<Setter
			Property="CanContentScroll"
			Value="True" />
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ListView}">
					<Border
						Name="Border"
						BorderThickness="1"
						Background="{DynamicResource DefaultBackground}"
						BorderBrush="{DynamicResource DefaultColor}">
						<ScrollViewer
							Style="{DynamicResource GridView.GridViewScrollViewerStyleKey}">
							<ItemsPresenter />
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ItemsControl.IsGrouping"
							Value="True">
							<Setter
								Property="CanContentScroll"
								Value="False" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="Border"
								Property="Background">
								<Setter.Value>
									<SolidColorBrush
										Color="{DynamicResource DisabledBorderLightColor}" />
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ListViewItem}"
		x:Key="{x:Type ListViewItem}">
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ListBoxItem}">
					<Border
						Name="Border"
						Padding="2"
						SnapsToDevicePixels="True"
						Background="#00FFFFFF">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup
								x:Name="CommonStates">
								<VisualState
									x:Name="Normal" />
								<VisualState
									x:Name="MouseOver" />
								<VisualState
									x:Name="Disabled" />
							</VisualStateGroup>
							<VisualStateGroup
								x:Name="SelectionStates">
								<VisualState
									x:Name="Unselected" />
								<VisualState
									x:Name="Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames
											Storyboard.TargetName="Border"
											Storyboard.TargetProperty="(Panel.Background).                     (SolidColorBrush.Color)">
											<EasingColorKeyFrame
												KeyTime="0"
												Value="{StaticResource SelectedBackgroundColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState
									x:Name="SelectedUnfocused">
									<Storyboard>
										<ColorAnimationUsingKeyFrames
											Storyboard.TargetName="Border"
											Storyboard.TargetProperty="(Panel.Background).                     (SolidColorBrush.Color)">
											<EasingColorKeyFrame
												KeyTime="0"
												Value="{StaticResource SelectedUnfocusedColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<GridViewRowPresenter
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
